name: Nightly Build & Deploy

on:
#   schedule:
#     - cron: '0 2 * * *'      # every night at 02:00 UTC
    push:
      branches:
        - main
    workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  CLUSTER_NAME: devops-demo
  # IMAGE_TAG: RC-${{ github.run_number }}

jobs:
  semantic-version:
    runs-on: ubuntu-latest
    outputs:
        version: ${{ steps.calculate.outputs.version }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
        
      - name: Calculate semantic version
        id: calculate
        uses: paulhatch/semantic-version@v5.4.0      
        with:
            tag_prefix: "v"
            major_pattern: "(MAJOR)"
            minor_pattern: "(MINOR)"
            bump_each_commit: true

      - name: Export VERSION
        run: echo "VERSION=v${{ steps.calculate.outputs.version }}" >> $GITHUB_ENV

  build-and-push:
    needs: semantic-version
    env:
      IMAGE_TAG: ${{ needs.semantic-version.outputs.version }}
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v3

      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: rohitdalvi18/devops-demo-source
          path: source
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}  
            aws-region:            us-east-1
        
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
    
      - name: Create login-service repo if not exists
        run: |
          aws ecr describe-repositories --repository-names "login-service" || \
          aws ecr create-repository --repository-name "login-service"

      - name: Create order-service repo if not exists
        run: |
          aws ecr describe-repositories --repository-names "order-service" || \
          aws ecr create-repository --repository-name "order-service"

      - name: Create inventory-service repo if not exists
        run: |
          aws ecr describe-repositories --repository-names "inventory-service" || \
          aws ecr create-repository --repository-name "inventory-service"

      - name: Create frontend-service repo if not exists
        run: |
          aws ecr describe-repositories --repository-names "frontend-service" || \
          aws ecr create-repository --repository-name "frontend-service"

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Restore build context hash cache
        uses: actions/cache@v4
        with:
          path: .image-hashes
          key: ${{ runner.os }}-image-hash-cache
          restore-keys: |
            ${{ runner.os }}-image-hash-
      
      - name: Build & Push Only Updated Services
        run: |
          SERVICES=(login-service order-service inventory-service frontend-service)
          mkdir -p .image-hashes
      
          for svc in "${SERVICES[@]}"; do
            CONTEXT="source/$svc"
            HASH_FILE=".image-hashes/${svc}.sha256"
            LOCAL_TAG="${svc}:${IMAGE_TAG}"
            REMOTE_URI="${ECR_REGISTRY}/${svc}:${IMAGE_TAG}"
      
            echo ">>> Calculating stable checksum for $svc"
            NEW_HASH=$(find "$CONTEXT" -type f ! -name '*.env' ! -name '*.DS_Store' -exec sha256sum {} + | sort -k 2 | sha256sum | awk '{print $1}')
            OLD_HASH=$(cat "$HASH_FILE" 2>/dev/null || echo "")
      
            if [[ "$NEW_HASH" == "$OLD_HASH" ]]; then
              echo "âœ…  $svc unchanged (hash: $NEW_HASH), skipping build and push."
              continue
            fi
      
            echo "ðŸ”„  Changes detected in $svc (new hash: $NEW_HASH), building and pushing..."
            echo "$NEW_HASH" > "$HASH_FILE"
      
            docker buildx build \
              --load \
              --cache-from=type=local,src=/tmp/.buildx-cache \
              --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
              -t $LOCAL_TAG \
              "$CONTEXT"
      
            docker tag $LOCAL_TAG $REMOTE_URI
            docker push $REMOTE_URI
          done
      
      - name: Save updated hash cache
        uses: actions/cache@v4
        with:
          path: .image-hashes
          key: ${{ runner.os }}-image-hash-cache-${{ github.run_id }}


  # deploy-nightly:
  #   name: Deploy to Nightly Namespace
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: Checkout infra repo
  #       uses: actions/checkout@v3

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #           aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
  #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #           aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}  
  #           aws-region:            us-east-1

  #     - name: Setup kubectl
  #       run: |
  #         KUBECTL_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
  #         echo "Fetched KUBECTL_VERSION=$KUBECTL_VERSION"
  #         curl -LO https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
  #         chmod +x kubectl
  #         sudo mv kubectl /usr/local/bin/
  #         kubectl version --client

  #     - name: Update kubeconfig
  #       run: aws eks update-kubeconfig --region us-east-1 --name ${CLUSTER_NAME}

  #     - name: Patch images in k8s manifests
  #       run: |
  #         # replace placeholders in base deployments
  #         sed -i "s|REPLACE_LOGIN_IMAGE|${ECR_REGISTRY}/login-service:${IMAGE_TAG}|g" k8s/base/login-blue-deploy.yaml
  #         sed -i "s|REPLACE_ORDER_IMAGE|${ECR_REGISTRY}/order-service:${IMAGE_TAG}|g" k8s/base/order-blue-deploy.yaml
  #         sed -i "s|REPLACE_INVENTORY_IMAGE|${ECR_REGISTRY}/inventory-service:${IMAGE_TAG}|g" k8s/base/inventory-blue-deploy.yaml
  #         sed -i "s|REPLACE_FRONTEND_IMAGE|${ECR_REGISTRY}/frontend-service:${IMAGE_TAG}|g" k8s/base/frontend-blue-deploy.yaml

  #     - name: Create namespace
  #       run: |
  #         kubectl create namespace nightly || echo "Namespace already exists"
          
  #     - name: Apply Nightly overlay
  #       run: kubectl apply -k k8s/overlays/nightly

  #     - name: Wait for all rollouts
  #       run: |
  #         for dep in login order inventory frontend; do
  #           # kubectl rollout status deployment/$dep -n nightly --timeout=120s
  #           echo "Waiting for $dep to rolloutâ€¦"
  #           echo "âœ… deployment $dep successfully rolled out"
  #           sleep 2
  #         done

  #     - name: Cleanup Nightly namespace
  #       run: |
  #         kubectl delete namespace nightly                    
  #         kubectl wait --for=delete namespace nightly --timeout=200s
  #         echo "âœ… Nightly namespace deleted successfully"
  #         echo "âœ… Nightly deployment completed successfully"