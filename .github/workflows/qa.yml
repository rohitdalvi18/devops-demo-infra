name: QA Pipeline

on:
  workflow_run:
    workflows: ["Nightly Build & Deploy"]
    types: [completed]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'ECR Image Tag (e.g., nightly-42)'
        required: true


env:
  AWS_REGION:     us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_DEFAULT_REGION: us-east-1
  ECR_REGISTRY:   ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  CLUSTER_NAME:   devops-demo
  IMAGE_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.image_tag || format('nightly-{0}', github.event.workflow_run.run_number) }}

jobs:
  deploy-qa:
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}  
          aws-region:            us-east-1

      - name: Setup kubectl
        run: |
          KUBECTL_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
          echo "Fetched KUBECTL_VERSION=$KUBECTL_VERSION"
          curl -LO https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name ${CLUSTER_NAME}

      - name: Patch images in base manifests
        run: |
          # replace placeholders with real ECR images and the nightly tag
          sed -i "s|REPLACE_LOGIN_IMAGE|${ECR_REGISTRY}/login-service:${IMAGE_TAG}|g" k8s/base/login-deploy.yaml
          sed -i "s|REPLACE_ORDER_IMAGE|${ECR_REGISTRY}/order-service:${IMAGE_TAG}|g" k8s/base/order-deploy.yaml
          sed -i "s|REPLACE_INVENTORY_IMAGE|${ECR_REGISTRY}/inventory-service:${IMAGE_TAG}|g" k8s/base/inventory-deploy.yaml
          sed -i "s|REPLACE_FRONTEND_IMAGE|${ECR_REGISTRY}/frontend-service:${IMAGE_TAG}|g" k8s/base/frontend-deploy.yaml

      - name: Create namespace
        run: |
          kubectl create namespace qa || echo "Namespace already exists"

      - name: Deploy to QA
        run: kubectl apply -k k8s/overlays/qa

      - name: Wait for QA rollouts
        run: |
          for dep in login order inventory frontend; do
            kubectl rollout status deployment/$dep -n qa --timeout=120s
          done

  wait-for-loadbalancer:
    needs: deploy-qa
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3       # needed for kubectl context
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}  
          aws-region:            us-east-1

      - name: Setup kubectl
        run: |
            KUBECTL_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
            echo "Fetched KUBECTL_VERSION=$KUBECTL_VERSION"
            curl -LO https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            kubectl version --client

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name ${CLUSTER_NAME}

      - name: Wait for LoadBalancer hostname
        run: |
          for i in $(seq 1 30); do
            HOST=$(kubectl get svc frontend -n qa \
              -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$HOST" ]; then
              echo "Found QA host: $HOST"
              echo "HOST=$HOST" >> $GITHUB_ENV
              exit 0
            fi
            echo "Waiting for ELB hostname… ($i/30)"
            sleep 10
          done
          echo "ERROR: ELB hostname not ready" >&2
          exit 1

  smoke-tests:
    needs: wait-for-loadbalancer
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}  
          aws-region:            us-east-1

      - name: Setup kubectl
        run: |
            KUBECTL_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
            echo "Fetched KUBECTL_VERSION=$KUBECTL_VERSION"
            curl -LO https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            kubectl version --client

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name ${CLUSTER_NAME}

      - name: Verify LoadBalancer hostname
        run: |
          for i in $(seq 1 30); do
            HOST=$(kubectl get svc frontend -n qa \
              -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$HOST" ]; then
              echo "Found QA host: $HOST"
              echo "HOST=$HOST" >> $GITHUB_ENV
              exit 0
            fi
            echo "Waiting for ELB hostname… ($i/30)"
            sleep 10
          done
          echo "ERROR: ELB hostname not ready" >&2
          exit 1
          
      - name: Test login-service
        run: |
          for i in {1..5}; do
            TEST_RESULT=$(curl -s "http://${HOST}/login?user=admin&pass=password&q=json")
            echo "Login test returned data: $TEST_RESULT"
            if echo "$TEST_RESULT" | grep -q '{"authenticated":true}'; then
                echo "✅ Login test successful!"
                exit 0
            fi
            echo "⏳ Retrying login check... ($i/5)"
            sleep 5
          done

          echo "❌ Login test failed!"
          exit 1

      - name: Test order-service
        run: |
          TEST_ORDERS=$(curl -s "http://${HOST}/orders?q=json")
          echo "Orders-service test returned data: $TEST_ORDERS"
          if echo "$TEST_ORDERS" | grep -q '{"id":1,"item":"Apple"}'; then
            echo "✅ Orders-service test successful!"
          else
            echo "❌ Orders-service test failed!"
            exit 1
          fi

      - name: Test inventory-service
        run: |
          INVENTORY_DATA=$(curl -s "http://${HOST}/inventory?q=json")
          echo "Inventory-service test returned data: $INVENTORY_DATA"
          if echo "$INVENTORY_DATA" | grep -q '{"sku":"Apple","qty":100}'; then
            echo "✅ Inventory-service test successful!"
          else
            echo "❌ Inventory-service test failed!"
            exit 1
          fi
