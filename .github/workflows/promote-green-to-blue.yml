name: Promote Green to Blue

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy (e.g. nightly-42)'
        required: true
      img_tag:
        description: 'ECR Image Tag (e.g., nightly-42)'
        required: true
  repository_dispatch:
    types: [Promote Green to Blue]

env:
  AWS_REGION:     us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REGISTRY:   ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  CLUSTER_NAME:   devops-demo
  IMAGE_TAG:      ${{ github.event.client_payload.image_tag || github.event.inputs.image_tag }}
  IMG_TAG: ${{ github.event.client_payload.img_tag || github.event.inputs.img_tag }}

jobs:
  await-approval:
    name: Await Admin Approval for Blue Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Verify image tag
        run: | 
            echo `${{ env.IMG_TAG }}`
      
      - name: Pause for manual approval ðŸ›‘
        uses: trstringer/manual-approval@v1
        with:
            secret: ${{ secrets.GH_token }}
            approvers: rgdalvi            # GitHub username of the approver
            minimum-approvals: 1
            issue-title: "Approve Production Deployment (Green â†’ Blue)"
            issue-body: |
                âœ… QA pipeline succeeded and the green deployment is healthy.

                This step will promote the green image `${{ env.IMG_TAG }}` to the blue environment (production traffic).

                ðŸ”„ This involves:
                â€¢ Updating service selectors to point to the new blue pods
                â€¢ Redeploying with the same image tag: `${{ env.IMG_TAG }}`

                ðŸ“„ QA Pipeline Details:  
                ${{ github.event.workflow_run.html_url }}

                ðŸŸ¢ **To proceed**, comment **"approved"**, **"lgtm"**, or **"yes"**.  
                ðŸ”´ **To cancel**, comment **"deny"** or **"no"**.

  switch-to-blue:
    name: Promote Green to Blue
    needs: await-approval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}  
          aws-region:            us-east-1

      - name: Setup kubectl
        run: |
          KUBECTL_VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
          echo "Fetched KUBECTL_VERSION=$KUBECTL_VERSION"
          curl -LO https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name ${CLUSTER_NAME}

      - name: Patch Base Manifests for Blue
        run: |
          # only patch the *blue* Deployment files
          sed -i "s|REPLACE_LOGIN_IMAGE|${ECR_REGISTRY}/login-service:${IMAGE_TAG}|g" \
            k8s/base/login-blue-deploy.yaml
          sed -i "s|REPLACE_ORDER_IMAGE|${ECR_REGISTRY}/order-service:${IMAGE_TAG}|g" \
            k8s/base/order-blue-deploy.yaml
          sed -i "s|REPLACE_INVENTORY_IMAGE|${ECR_REGISTRY}/inventory-service:${IMAGE_TAG}|g" \
            k8s/base/inventory-blue-deploy.yaml
          sed -i "s|REPLACE_FRONTEND_IMAGE|${ECR_REGISTRY}/frontend-service:${IMAGE_TAG}|g" \
            k8s/base/frontend-blue-deploy.yaml

      - name: Apply Blue Overlay
        run: kubectl apply -k k8s/overlays/prod/blue

      - name: Wait for Blue Rollout
        run: |
          for svc in login-blue order-blue inventory-blue frontend-blue; do
            kubectl rollout status deployment/$svc -n prod --timeout=300s
          done
  
  rollback-on-failure:
    name: Trigger Rollback to Green on Failure
    needs: switch-to-blue
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
        - name: Trigger rollback to green
          uses: peter-evans/repository-dispatch@v3
          with:
            token:      ${{ secrets.GH_TOKEN }}
            repository: ${{ github.repository }}
            event-type: rollback-to-green
            client-payload: |
                    {"reason":"Blue promotion failed in run ${{ github.run_number }}"}
                    